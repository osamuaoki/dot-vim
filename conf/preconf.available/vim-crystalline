" vim: sts=2 sw=2 ft=vim:
"
" Basic design
" Left most:    Mode for cursor
" Left center:  File property (git/file system)
" Right center: File property (internal content type)
" Right most:   Data at cursor
"
set laststatus=2
set showtabline=2
set guioptions-=e
set noshowmode

let g:crystalline_enable_sep = 1
let g:crystalline_statusline_fn = 'StatusLine'
let g:crystalline_tabline_fn = 'TabLine'

" Color choices
" badwolf  gruvbox     molokai     shadesofpurple
" default  hybrid      onedark     solarized
" dracula  jellybeans  papercolor
let g:crystalline_theme = 'default'

"set background=light
"set background=dark

function! StatusLine(current, width)
  let l:s = ''

  " left
  if a:current
    let l:s .= crystalline#mode()
    let l:s .= '%{&paste ?"PASTE ":""}'
    let l:s .= crystalline#right_mode_sep('')
  else
    let l:s .= '%#CrystallineInactive#'
  endif

  " Skip git branch RO for HELP
  if &filetype !=# 'help'
    if a:width >= 80
      if g:loaded_gitbranch == 1
	" If itchyny/vim-gitbranch is available
	let l:b = gitbranch#name()
      elseif g:loaded_fugitive == 1
	" If tpope/vim-fugitive is available
	let l:b = fugitive#head()
      else
	let l:b = ''
      endif
      if l:b !=# ''
	let l:b = ' ' . l:b . ' áš  '
      endif
      let l:s .= l:b
    endif
    "let l:s .= ' %<%F%m%r%h%w '
    let l:s .= ' %<%f%m%r%h%w '
  else
    "let l:s .= '%<%F%m%h%w '
    let l:s .= ' %<%f%m%h%w '
  endif
  " Skip master and also not in HELP
  if a:current
    let l:s .= crystalline#right_sep('', 'Fill')
  endif

  " center split
  let l:s .= '%='

  " right
  if a:current
    if a:width >= 80
      let l:s .= crystalline#left_sep('', 'Fill')
      if ale#engine#IsCheckingBuffer(bufnr(''))
	let l:s .= ' Linting ... '
      else
	let l:counts = ale#statusline#Count(bufnr(''))
	let l:all_errors = l:counts.error + l:counts.style_error
	let l:all_non_errors = l:counts.total - l:all_errors
	let l:all_errors = l:counts.error + l:counts.style_error
	let l:s .= l:counts.total == 0 ? ' OK' : ''
	let l:s .= l:all_errors == 0 ? '' : printf(' E: %d', all_errors)
	let l:s .= l:all_non_errors == 0 ? '' : printf(' W: %d', all_non_errors)
      endif
      let l:s .= ' %{&ft} '
      " skip utf-8
      if &fileencoding !=# 'utf-8' && &fileencoding !=# ''
	let l:s .= '[%{&fileencoding}] '
      endif
      " skip unix
      if &fileformat !=# 'unix' && &fileformat !=# ''
	let l:s .= '[%{&fileformat}] '
      endif
    endif
    let l:s .= crystalline#left_mode_sep('')
  endif
  if a:width >= 80
    " print UNICODE code point
    let l:s .= ' U+%04B'
  endif
  let l:s .= ' %l/%L %c%V'
  if a:width >= 80
    let l:s .= ' %P '
  endif
  return l:s
endfunction

function! TabLine()
  let l:vimlabel = has('nvim') ?  ' NVIM ' : ' VIM '
  return crystalline#bufferline(2, len(l:vimlabel), 1) . '%=%#CrystallineTab# ' . l:vimlabel
endfunction
