" vim: sts=2 sw=2 ft=vim:
"
" Basic design
" Left most:    Mode for cursor
" Left center:  File property (git/file system)
" Right center: File property (internal content type)
" Right most:   Data at cursor
"
set laststatus=2
set showtabline=2
set guioptions-=e
set noshowmode

let g:crystalline_enable_sep = 1
let g:crystalline_statusline_fn = 'StatusLine'
let g:crystalline_tabline_fn = 'TabLine'

" with powerline font
let g:crystalline_separators = ['', '']

" Color choices
" badwolf  gruvbox     molokai     shadesofpurple
" default  hybrid      onedark     solarized
" dracula  jellybeans  papercolor
let g:crystalline_theme = 'default'

"set background=light
"set background=dark

function! MyFileEncoding()
  " Make best effort to get valid encoding
  let l:enc = ( &fileencoding !=# '' ? &fileencoding : &encoding )
  " Skip obvious encoding utf-8
  return l:enc !=# 'utf-8' ? (l:enc) : ""
endfunction

function! MyFileFormat()
  " Skip obvious file format unix
  return &fileformat !=# 'unix' ? &fileformat : ""
endfunction

function! MyGitBranch()
  if exists('g:loaded_gitbranch') && g:loaded_gitbranch == 1
    " https://github.com/itchyny/vim-gitbranch
    let l:b = gitbranch#name()
  elseif exists('g:loaded_fugitive') && g:loaded_fugitive == 1
    " https://github.com/tpope/vim-fugitive
    let l:b = fugitive#head()
  else
    " No way to get git branch name
    let l:b = ''
  endif
  if l:b !=# ''
    " powerline font
    let l:b = '  ' . l:b . ' '
  endif
  return l:b
endfunction

function! MyFiletype()
  if &filetype ==# 'help'
    let l:ft = '[Help]'
  elseif &previewwindow
    let l:ft = '[Preview]'
  elseif &buftype ==# 'terminal'
    let l:ft = '' " supress [-]
  elseif &readonly
    "let l:ft = '[RO]'
    let l:ft = ''
  else
    let l:ft = &modified ? '+' : ''
    let l:ft = &modifiable ? '' : '-'
    let l:ft = (l:ft != '' ? '[' . (l:ft) . ']' : '')
  endif
  return l:ft
endfunction

function! MyAleOutput()
  if ale#engine#IsCheckingBuffer(bufnr(''))
    let l:s = 'Linting ... '
  else
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:s = l:counts.total == 0 ? ' OK' : ''
    let l:s .= l:counts.error + l:counts.style_error == 0 ? '' :
      \ printf('E: %d ', l:counts.error + l:counts.style_error)
    let l:s .= l:counts.total - l:counts.error - l:counts.style_error == 0 ? '' :
      \ printf('W: %d ', l:counts.error + l:counts.style_error)
  endif
  return l:s
endfunction

function! StatusLine(current, width)

  " left
  if a:current
    let l:statusline = crystalline#mode()
    let l:statusline .= '%{&paste ? "PASTE " : ""}'
    let l:statusline .= crystalline#right_mode_sep('')
  else
    let l:statusline = '%#CrystallineInactive#'
  endif

  " Skip git branch for HELP or small window
  if &filetype !=# 'help' && a:width >= 80
    let l:statusline .= '%{MyGitBranch()}'
  endif
  let l:statusline .= ' %<%t'
  let l:statusline .= '%{MyFiletype()} '
  " Skip right separator if Inactive
  if a:current
    let l:statusline .= crystalline#right_sep('', 'Fill')
  endif

  " center split
  let l:statusline .= '%='

  " right
  if a:current
    if a:width >= 80
      if exists('g:loaded_ale') && g:loaded_ale == 1
        let l:statusline .= '%{MyAleOutput()}'
      endif
    endif
  endif
  let l:statusline .= crystalline#left_sep('', 'Fill')
  " Always print filetype
  let l:statusline .= ' %{&filetype} '
  if a:current
    if a:width >= 80
      let l:statusline .= '%{MyFileEncoding()}'
      let l:statusline .= '%{MyFileFormat()}'
    endif
    let l:statusline .= crystalline#left_mode_sep('')
    if a:width >= 80
      " print UNICODE code point
      let l:statusline .= ' U+%04B'
    endif
  endif
  let l:statusline .= ' %l/%L %c%V'
  if a:width >= 80
    let l:statusline .= ' %P '
  endif
  return l:statusline
endfunction

function! TabLine()
  let l:vimlabel = has('nvim') ?  ' NVIM ' : ' VIM '
  return crystalline#bufferline(2, len(l:vimlabel), 1) . '%=%#CrystallineTab# ' . l:vimlabel
endfunction

