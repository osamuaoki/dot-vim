#!/bin/sh -e
# vim:set et ts=2 sts=2 sw=2 si ai tw=78 ft=sh:
#############################################################################
# Copyright © 2019 Osamu Aoki
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#############################################################################
PROG="${0##*/}"
VERSION="0.3"
DEBUG=": "
#DEBUG="echo"

# Use ~/.vim as PWD
HVIMDIR="$HOME/.vim"
cd "$HVIMDIR"
# setup directories
PPAVDIR="conf/pack.available"
PPBLIST="conf/pack.blacklist"
mkdir -p "$PPAVDIR"
PPENDIR="pack/vimconf/start"
mkdir -p "$PPENDIR"
PRCAVDIR="conf/preconf.available"
mkdir -p "$PRCAVDIR"
PRCENDIR="conf/preconf.enabled"
mkdir -p "$PRCENDIR"
PTCAVDIR="conf/postconf.available"
mkdir -p "$PTCAVDIR"
PTCENDIR="conf/postconf.enabled"
mkdir -p "$PTCENDIR"
PRVIDIR="conf/required.vim"
mkdir -p "$PRVIDIR"
PRSYDIR="conf/required.system"
mkdir -p "$PRSYDIR"
OCAVDIR="conf/override.available"
mkdir -p "$OCAVDIR"
OCENDIR="conf/override.enabled"
mkdir -p "$OCENDIR"
#
#######################################################################
# Functions
#######################################################################
help() {
  echo "$PROG: Select Vim Plugins and Overrides"
  echo "            Version $VERSION, © 2019   Osamu Aoki"
  echo ""
  echo "Usage: $PROG [a|sp|up|so|uo|nm|gu|r|h|ga \$URL|gd \$REPO]"
  echo ""
  echo "Actions:"
  echo "(none) Start with current plugins and overrides."
  echo "  a    Select All plugins and unselect All overrides."
  echo "  sp   Select all Plugins."
  echo "  up   Unselect all Plugins."
  echo "  so   Select all Overrides."
  echo "  uo   Unselect all Overrides."
  echo "  nm   No Menu selection."
  echo "  ga   Add a local plugin Git repository \$URL."
  echo "  gd   Drop a local plugin Git repository \$REPO."
  echo "  gu   Update all local plugin Git repositories."
  echo "  r    Reset all configurations and local plugin changes."
  echo "  h    Show this help."
  echo ""
  echo "           Latest: https://github.com/osamuaoki/dot-vim"
}
#
cleanup() {
  RTN="$?"
  echo "Operation interrupted. Exit code($RTN)"
  exit "$RTN"
}
#
trap "cleanup" 1 2 15
#
expand_plugin () {
  # expand vim plugin words to include their dependencies
  # shellcheck disable=SC2068
  for pkg in $@; do
    echo "$pkg"
    if [ -e "$PRVIDIR/$pkg" ]; then
      grep -v -e '^[ \t]*[#"]' "$PRVIDIR/$pkg" || true
    fi
  done | sort |uniq
}
#
check_deb () {
  # convert plugin words to their dependency Debian packages
  # shellcheck disable=SC2068
  for pkg in $@; do
    if [ -e "$PRSYDIR/$pkg" ]; then
      ( grep -v -e '^[ \t]*[#"]' "$PRSYDIR/$pkg" || true ; ) | \
      while read -r deb; do
        if ! dpkg --verify "$deb" 2>/dev/null; then
          echo "$deb"
        fi
      done
    fi
  done
}
#
menu_dialog () {
  # Input:
  #   PROG: Window title
  #   ITEM_NAME: Selection item name
  #   AVAILABLE: available choices (words)
  #   MANAGEDS: managed choices (words)
  # Output:
  #   SELECTED: selected choices (words)
  #
  # Window size
  WW=640
  WH=400
  # CL0, CL1: command line
  CL0="zenity"
  CL0="$CL0 --list"
  CL0="$CL0 --title='$PROG'"
  CL0="$CL0 --text='Select $ITEM_NAME to Activate   (currently"
  CL1="--width $WW"
  CL1="$CL1 --height $WH"
  CL1="$CL1 --checklist"
  CL1="$CL1 --print-column=2"
  CL1="$CL1 --column 'Checks'"
  CL1="$CL1 --column 'Vim Plugins'"
  CL1="$CL1 --separator=' '"
  # N: number of enabled plugin in menu
  N=0
  $DEBUG ">>> AVAILABLE=$AVAILABLE"
  $DEBUG ">>> MANAGEDS=$MANAGEDS"
  for M in ${AVAILABLE}; do
    F="FALSE"
    for P in ${MANAGEDS}; do
      if [ "$M" = "$P" ]; then
        F="TRUE"
        N=$((N + 1))
        break
      fi
    done
    CL1="$CL1 '$F' '$M'"
  done
  # Show plugin selection menu
  SELECTED=$(eval "$CL0 $N active)' $CL1")
  $DEBUG ">>> SELECTED=$SELECTED"
}
#
set_plugin () {
  reset_all_plugin
  for P in $PPENM; do
    # Set link for plugin
    ln -sf "../../../$PPAVDIR/$P" "$PPENDIR/$P"
    if [ -e "$PRCAVDIR/$P" ]; then
      # Set link for plugin pre-configuration
      ln -sf "../../$PRCAVDIR/$P" "$PRCENDIR/$P"
    fi
    if [ -e "$PTCAVDIR/$P" ]; then
      # Set link for plugin post-configuration
      ln -sf "../../$PTCAVDIR/$P" "$PTCENDIR/$P"
    fi
  done
}
#
set_override () {
  reset_all_override
  for P in $OCENM; do
    if [ -e "$OCAVDIR/$P" ]; then
      # Set link for custom configuration
      ln -sf "../../$OCAVDIR/$P" "$OCENDIR/$P"
    fi
  done
}
#
set_all_plugin () {
  PPENM="${PPAVS}"
  set_plugin
}
#
set_all_override () {
  OCENM="${OCAVS}"
  set_override
}
#
reset_all_plugin () {
  for P in $PPAVS; do
    # Reset link for plugin
    rm -rf "${PPENDIR:?error for null PPENDIR}/$P"
  done
  for P in $PRCAVS; do
    # Reset link for plugin pre-configuration
    rm -rf "${PRCENDIR:?error for null PRCENDIR}/$P"
  done
  for P in $PTCAVS; do
    # Reset link for plugin pre-configuration
    rm -rf "${PTCENDIR:?error for null PTCENDIR}/$P"
  done
}
#
reset_all_override () {
  for P in $OCAVS; do
    # Reset link for custom configuration
    rm -rf "${OCENDIR:?error for null OCENDIR}/$P"
  done
}
#
#
# List repository
list_repository () {
  # $1: directory to check repository
  # $PPBLIST: List blacklist repository
  { \
    { { find "$1" -mindepth 1 -maxdepth 1 -type d || true ; } \
      2>/dev/null | sed -e 's,.*/,,'; } ; \
    { grep -v "^#" "$PPBLIST" || true ; } ; \
  } | sort -f | uniq -u
}
#
# List link
list_link () {
  # $1: directory to check activated configuration
  { find "$1" -mindepth 1 -maxdepth 1 -type l || true ; } \
    2>/dev/null | sed -e 's,.*/,,' |sort -f
}
#
# List file
list_file () {
  # $1: directory to check available configuration
  { find "$1" -mindepth 1 -maxdepth 1 -type f || true ; } \
    2>/dev/null | sed -e 's,.*/,,' |sort -f
}
#
check_managed () {
  AVDIR="$1"
  ENDIR="$2"
  ENABLEDS="$(list_link "$ENDIR")"
  # package managed by this program
  MANAGEDS=""
  # package **NOT** managed by this program
  NONMNGDS=""
  for P in ${ENABLEDS}; do
    if [ ! -e "$ENDIR/$P" ] ; then
      echo "!!! Remove dangling symlink for plugin: $ENDIR/$P" >&2
      rm -f  "$ENDIR/$P"
    elif [ -h "$ENDIR/$P" ] && \
      [ "$(realpath "$ENDIR/$P")" = "$(realpath "$AVDIR/$P")" ] ; then
      MANAGEDS="$MANAGEDS $P"
    else
      NONMNGDS="$NONMNGDS $P"
    fi
  done
}
#######################################################################
# Main program
#######################################################################
#
if [ -f ~/.vimrc ] ; then
  echo "W: vimconf is incompatible with ~/.vimrc.  Rename it to ~/.vimrc.bak"
  mv ~/.vimrc ~/.vimrc.bak
fi
PPAVS="$(list_repository "$PPAVDIR")"
$DEBUG ">>> PPAVS=$PPAVS"
PRCAVS="$(list_file "$PRCAVDIR")"
$DEBUG ">>> PRCAVS=$PRCAVS"
PTCAVS="$(list_file "$PTCAVDIR")"
$DEBUG ">>> PTCAVS=$PTCAVS"
OCAVS="$(list_file "$OCAVDIR")"
$DEBUG ">>> OCAVS=$OCAVS"
#
# check enabled plugin package
check_managed "$PPAVDIR" "$PPENDIR"
# package managed by this program
PPENM="$MANAGEDS"
# package **NOT** managed by this program
PPENN="$NONMNGDS"
#
# check override configuration
check_managed "$OCAVDIR" "$OCENDIR"
# override configuration managed by this program
OCENM="$MANAGEDS"
# override configuration **NOT** managed by this program
OCENN="$NONMNGDS"
#
MENU_ENABLED="true"
while [ -n "$1" ]; do
  case "$1" in
    a)
      PPENM="${PPAVS}"
      OCENM=""
      ;;
    sp)
      PPENM="${PPAVS}"
      ;;
    up)
      PPENM=""
      ;;
    so)
      OCENM="${OCAVS}"
      ;;
    uo)
      OCENM=""
      ;;
    nm)
      MENU_ENABLED="false"
      ;;
    ga)
      URL="${2}"
      REPO="${2##*/}"
      REPO="${REPO%.git}"
      git submodule add --name "${NAME}" "${URL}" "${PPAVDIR}/${REPO}"
      git commit -m "Add ${URL} to ${PPAVDIR}/${REPO}"
      exit 0
      ;;
    gd)
      REPO="${2##*/}"
      REPO="${REPO%.git}"
      git rm -f "${PPAVDIR}/${REPO}"
      git commit -m "Remove ${PPAVDIR}/${REPO}"
      exit 0
      ;;
    gu)
      git submodule update --init --recursive
      exit 0
      ;;
    r)
      "$PROG" up uo nm
      printf "Are you sure to reset all (y/N) ?"
      read -r YN
      if [ "$YN" = "y" ] || [ "$YN" = "Y" ]; then
        git rm -rf "${PPAVDIR}"
        git submodule update --init --recursive
        git reset --hard
        git clean -d -f -x
        git submodule foreach git reset --hard
        git submodule foreach git clean -d -f -x
      fi
      exit 0
      ;;
    *)
      help
      exit 0
      ;;
  esac
  shift
done
#
if $MENU_ENABLED; then
  # Plugin selection
  ITEM_NAME="Vim Plugins"
  AVAILABLE="${PPAVS}"
  MANAGEDS="${PPENM}"
  menu_dialog
  PPENM=$SELECTED
  # Add dependency plugins
  PPENM="$(expand_plugin "$PPENM")"
  # check dependency deb packages
  DEBN="$(check_deb "$PPENM")"
  #
  # Override selection
  ITEM_NAME="Vim Overrides"
  AVAILABLE="${OCAVS}"
  MANAGEDS="${OCENM}"
  menu_dialog
  OCENM=$SELECTED
fi
#
# Change configuration
set_plugin
set_override
#
# Sanity report
for P in $PPENN; do
  echo "$PROG doesn't manege: $PPENDIR/$P" >&2
done
for P in $OCENN; do
  echo "$PROG doesn't manege: $OCENDIR/$P" >&2
done
for P in $DEBN; do
  echo "!!! Please install a Debian package !!!: $P" >&2
done
#
# Update tag data
vim -E -c packloadall -c 'silent! helptags ALL'  -c q
